package json_parser

import "fmt"

func json_word(jsonStr string, ref int) (int, error) {
    fmt.Println("JSON word:")
    for i := ref; i < len(jsonStr); i++ {
        if jsonStr[i] == '"' {
            if len(jsonStr) == i {
                return len(jsonStr), nil
            } else {
                return i + 1, nil
            }
        }
        fmt.Printf("%c", jsonStr[i])
    }
	fmt.Printf("\n")
    return 0, fmt.Errorf("unclosed json word")
}

func json_scope(jsonStr string) bool {
    fmt.Println("JSON scope:")
	exp_assign := false
    for i := 0; i < len(jsonStr); i++ {
		if jsonStr[i] == ' ' || jsonStr[i] == '\n' || jsonStr[i] == '	' {
			continue
		}
        else if jsonStr[i] == '"' {
            newPos, err := json_word(jsonStr, i+1)
            if err != nil {
                fmt.Println("Error: ", err)
                return false
            }
			exp_assign = !exp_assign;
            i = newPos
        }
        else if jsonStr[i] == ':' {
            if !exp_assign {
                fmt.Println("Error: unexpected char ':'")
                return false
            }
        }
        else if jsonStr[i] == '{' {
            if exp_assign {
                fmt.Println("Error: unexpected char '{'")
                return false
            }
        }

        fmt.Printf("%c\n", jsonStr[i])
    }
    return true
}

func IsValidJSON(jsonStr string) bool {
    for i := 0; i < len(jsonStr); i++ {
		if jsonStr[i] == ' ' || jsonStr[i] == '\n' || jsonStr[i] == '	' {
			continue
		}
		if jsonStr[i] == '{' {
            newPos, err := json_scope(jsonStr, i+1)
            if err != nil {
                fmt.Println("Error: ", err)
                return false
            }
			exp_assign = !exp_assign;
            i = newPos
        }

        fmt.Printf("%c\n", jsonStr[i])
    }
    return true
}